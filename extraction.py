import csv
from os import system as sys
import time
import xml.etree.ElementTree as ET
import os

def Extract():
    DIRTYPE=["E:/Major Project/UnpackedApk/"]
    permCollection = set()
    actionCollection=set()
    for datastoredir in DIRTYPE:
        datastoredir="E:/Major Project/UnpackedApk/"
        
        Flag=1
        TimeStamp = str(time.time())
        TargetApkPath = datastoredir
        ApkNameList = os.listdir(datastoredir)
        if len(ApkNameList) == int(0):
            Flag=0

        if Flag != int(0):
            ApkNameList.sort()
            TargetApkPath = datastoredir+"/"
            CurrentApk = 0

            for ApkName in ApkNameList:
                TargetApk = TargetApkPath + ApkName
                print('testline')

                print("try"+ " [" + str(CurrentApk + 1) + ' / ' + str(len(ApkNameList)) + "] --- "+ApkName,end="")
               
                UnpackedDir = "E:/Major Project/UnpackedApk/" + ApkName 
                MainfestPath = UnpackedDir + "/AndroidManifest.xml"
                try:
                    
                    root = ET.parse(MainfestPath).getroot()
                    intnets = root.findall("application/activity/intent-filter/action")
                    for action in intnets:
                        for attribute in action.attrib:
                            print("{}\t:\t{}\n".format(attribute, action.attrib[attribute]))
                            actionElement = action.attrib[attribute]

                            if actionElement in actionCollection:
                                print("0", end=' ')
                            else:
                                print("1", end=' ')
                                actionCollection.add(actionElement)

                except Exception as e:
                        print(str(e))
                        print(TargetApk)
                        pass
                    
                        CurrentApk += 1
                actionList = list(actionCollection)

                try:
                    root = ET.parse(MainfestPath).getroot()
                    permissions = root.findall("uses-permission")
                    for perm in permissions:
                        for att in perm.attrib:
                            print("{}\t:\t{}\n".format(att, perm.attrib[att]))
                            permelement = perm.attrib[att]

                            if permelement in permCollection:
                                print("0", end=' ')
                            else:
                                print("1", end=' ')
                                permCollection.add(permelement)

                except Exception as e:
                        print(str(e))
                        print(TargetApk)
                        pass
                    
                        CurrentApk += 1
                permList = list(permCollection)
        with open("UpdateActionList.txt", 'w') as file:        # SAVE LIST IN FILE.
            for i in actionList:
                file.write(i + '\n')

        with open("UpdatePermList.txt", 'w') as file:        # SAVE LIST IN FILE.
            for i in permList:
                file.write(i + '\n')
                

def CSVFormatter():
    test_file=open("UpdatePermList.txt")
    data=test_file.read()
    test_file.close()
    permlist=data.split('\n')
    permlist.pop()
    csv_row_data=['NAME']  #ADD NAME COLUMN
    csv_row_data += permlist
    with open('Book2.csv','w') as csv_file:
        writer=csv.writer(csv_file)
        writer.writerow(csv_row_data)

def CSVFormatterForActions():
    test_file=open("UpdateActionList.txt")
    data=test_file.read()
    test_file.close()
    actionlist=data.split('\n')
    actionlist.pop()
    csv_row_data=['NAME']  #ADD NAME COLUMN
    csv_row_data += actionlist
    with open('Book3.csv','w') as csv_file:
        writer=csv.writer(csv_file)
        writer.writerow(csv_row_data)

def Bagger(datastoredir):
    datastoredir="E:/Major Project/UnpackedApk"
    TimeStamp = str(time.time())
    Flag=1
    TargetApkPath = datastoredir+"\\"
    ApkNameList = os.listdir(datastoredir)
    if len(ApkNameList) == int(0):
        Flag=0

    if Flag != int(0):
        ApkNameList.sort()
        TotalApks = len(ApkNameList)
        CurrentApk = 0
        fieldnames=[]
        with open('Book2.csv') as csv_file:
            CSVREADER=csv.DictReader(csv_file)
            fieldnames=CSVREADER.fieldnames  
        csv_master_dict=dict.fromkeys(fieldnames,0)   #GET THE FIELD NAMES
       
      
        for ApkName in ApkNameList:
            TargetApk = TargetApkPath + ApkName

            print(">[" + str(CurrentApk + 1) + ' \\ ' + str(TotalApks) + "] --- "+ApkName ,end=' ')
            print("\t.",end=' ')
            UnpackedDir = "E:/Major Project/UnpackedApk/" + ApkName 
            MainfestPath = UnpackedDir + "/AndroidManifest.xml"
           
            try:
                root = ET.parse(MainfestPath).getroot()         # FORMAT DATA ROW 
                permissions = root.findall("uses-permission")
                csv_master_dict=dict.fromkeys(fieldnames,0)
                csv_master_dict['NAME']=ApkName
                for perm in permissions:
                    for att in perm.attrib:
                        permelement = perm.attrib[att]
                        csv_master_dict[permelement]=1
                
                print("#", end=' ')
                with open('Book2.csv', 'a') as csv_dump:
                    CSVwriter = csv.DictWriter(csv_dump, fieldnames=fieldnames)
                    CSVwriter.writerow(csv_master_dict)         # SAVE DATA TO DATASET ROW BY ROW FOR EACH APPLICATION
                print(".")
            except Exception as e :
                print("EERRRROORR")
                print(str(e))
                pass
            CurrentApk += 1
def BaggerforAction(datastoredir):
    datastoredir="E:/Major Project/UnpackedApk"
    TimeStamp = str(time.time())
    Flag=1
    TargetApkPath = datastoredir+"\\"
    ApkNameList = os.listdir(datastoredir)
    if len(ApkNameList) == int(0):
        Flag=0

    if Flag != int(0):
        ApkNameList.sort()
        TotalApks = len(ApkNameList)
        CurrentApk = 0
    
        actionfieldnames=[]
        with open('Book3.csv') as csv_file:
            CSVREADER=csv.DictReader(csv_file)
            actionfieldnames=CSVREADER.fieldnames  
        csv_master_dict_action=dict.fromkeys(actionfieldnames,0)   #GET THE FIELD NAMES

      
        for ApkName in ApkNameList:
            TargetApk = TargetApkPath + ApkName

            print(">[" + str(CurrentApk + 1) + ' \\ ' + str(TotalApks) + "] --- "+ApkName ,end=' ')
            print("\t.",end=' ')
            UnpackedDir = "E:/Major Project/UnpackedApk/" + ApkName 
            MainfestPath = UnpackedDir + "/AndroidManifest.xml"
           
            try:
                root = ET.parse(MainfestPath).getroot()         # FORMAT DATA ROW 
                intents = root.findall("application/activity/intent-filter/action")
                csv_master_dict_action=dict.fromkeys(actionfieldnames,0)
                csv_master_dict_action['NAME']=ApkName
                for actions in intents:
                    for att in actions.attrib:
                        actionelement = actions.attrib[att]
                        csv_master_dict_action[actionelement]=1
                
                print("#", end=' ')
                with open('Book3.csv', 'a') as csv_dump:
                    CSVwriter = csv.DictWriter(csv_dump, fieldnames=actionfieldnames)
                    CSVwriter.writerow(csv_master_dict_action)         # SAVE DATA TO DATASET ROW BY ROW FOR EACH APPLICATION
                print(".")
            except Exception as e :
                print("EERRRROORR")
                print(str(e))
                pass
            CurrentApk += 1


def Main():
    print("Extracting Permissions\t[*---]")
    Extract()
    CSVFormatter()
    CSVFormatterForActions()
    print("\n\nCreating Main Dataset\t[****]")
    print("\n\n ***************DONE*****************  \nSaved as Book2.csv")
    Bagger("E:\Major Project")
    BaggerforAction("E:\Major Project")

if __name__ == '__main__':
    Main()
    