#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
get_ipython().run_line_magic('matplotlib', 'inline')
from sklearn.feature_selection import VarianceThreshold
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics import confusion_matrix
from sklearn.mixture import GaussianMixture
from mlxtend.plotting import plot_confusion_matrix


# In[2]:


df = pd.read_csv("E:\Major Project\Combined_Full_Feature.csv")
df=df.replace('',np.nan)
df=df.dropna(axis="rows",how="any")
df.head()


# In[3]:


df.tail()


# In[4]:


x=df['Class'][0:350]
print(x)


# In[5]:


x.tail()


# In[6]:


features = df.iloc[:,3:]


# In[7]:


feature = pd.DataFrame(features)


# In[8]:


feature


# In[9]:


selector=VarianceThreshold()
vt=selector.fit_transform(feature)
vt


# In[10]:


pca = PCA(n_components=20)
pca_features = pca.fit_transform(vt)
pca_features



# In[11]:


k_means = KMeans(n_clusters=2, random_state=42).fit(pca_features)


# In[12]:


k_means


# In[13]:


pd.Series(k_means.labels_).value_counts()


# In[14]:


k_means.labels_


# In[15]:


plt.pie(pd.Series(k_means.labels_).value_counts(), labels=['Goodware', 'Malware'], autopct='%.2f')


# In[16]:


Vt_pca_kmeans=confusion_matrix(k_means.labels_,x)
Vt_pca_kmeans


# In[17]:


tp,fn,fp,tn=Vt_pca_kmeans.ravel()
print(tp,fn,fp,tn)


# In[18]:


plot_confusion_matrix(Vt_pca_kmeans, figsize=(4,4), hide_ticks=True)
plt.title("Confusion Matrix")
plt.xticks(range(2), ["Goodware","Malware"], fontsize=16)
plt.yticks(range(2), ["Goodware","Malware"], fontsize=16)
plt.show()


# In[19]:


#vt+pca+gmm
gmm = GaussianMixture(n_components=2, random_state=42).fit(pca_features)
gmm


# In[20]:


GMM=GaussianMixture(n_components=2, random_state=42).fit(feature)
GMM


# In[21]:



LABEL=GMM.predict(feature)
LABEL


# In[22]:


plt.pie(pd.Series(LABEL).value_counts(),labels=['Goodware', 'Malware'], autopct='%.2f')


# In[23]:


label=gmm.predict(pca_features)


# In[24]:


label


# In[25]:


pd.Series(label).value_counts()


# In[26]:


plt.pie(pd.Series(label).value_counts(),labels=['Goodware', 'Malware'], autopct='%.2f')


# In[27]:



vt_pca_gmm=confusion_matrix(label,x)
vt_pca_gmm


# In[28]:


GM=confusion_matrix(LABEL,x)
GM


# In[29]:


plot_confusion_matrix(GM, figsize=(5,5), hide_ticks=True)
plt.title("Confusion Matrix For  GM")
plt.xticks(range(2), ["Goodware","Malware"], fontsize=16)
plt.yticks(range(2), ["Goodware","Malware"], fontsize=16)
plt.show()


# In[30]:


Tp,Fn,Fp,Tn=GM.ravel()
print(Tp,Fn,Fp,Tn)


# In[31]:


Precision=Tp/(Tp+Fp)
Precision*100


# In[32]:


Recall=Tp/(Tp+Fn)
Recall *100


# In[33]:


Accuracy=(Tp+Tn)/(Tp+Tn+Fn+Fp)
Accuracy*100


# In[34]:


F_score=2*((Precision*Recall)/(Precision+Recall))
F_score*100


# In[35]:


TP,FN,FP,TN=vt_pca_gmm.ravel()
print(TP,FN,FP,TN)


# In[36]:


plot_confusion_matrix(vt_pca_gmm, figsize=(5,5), hide_ticks=True)
plt.title("Confusion Matrix For VT + PCA + GMM")
plt.xticks(range(2), ["Benign","Malware"], fontsize=16)
plt.yticks(range(2), ["Benign","Malware"], fontsize=16)
plt.show()


# In[37]:


#Precision:
Precision1=tp/(tp+fp)
Precision1*100


# In[38]:


Precision2=TP/(TP+FP)
Precision2*100


# In[39]:


#Recall:

Recall_1=tp/(tp+fn)
Recall_1*100


# In[40]:


Recall_2=TP/(TP+FN)
Recall_2*100


# In[41]:


#Accuracy:
Accuracy1=(tp+tn)/(tp+tn+fn+fp)
Accuracy1*100


# In[42]:


Accuracy2=(TP+TN)/(TN+TP+FN+FP)
Accuracy2*100


# In[43]:


F_score1=2*((Precision1*Recall_1)/(Precision1+Recall_1))
F_score1*100


# In[44]:


F_score2=2*((Precision2*Recall_2)/(Precision2+Recall_2))
F_score2*100


# In[ ]:





# In[ ]:




